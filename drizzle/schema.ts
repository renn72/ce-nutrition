import { sqliteTable, AnySQLiteColumn, integer, text, index, foreignKey, primaryKey, uniqueIndex } from "drizzle-orm/sqlite-core"
  import { sql } from "drizzle-orm"

export const ceNuGroceryStore = sqliteTable("ce-nu_grocery_store", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	name: text(),
	locations: text(),
});

export const ceNuIngredient = sqliteTable("ce-nu_ingredient", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	userId: text("user_id").references(() => ceNuUser.id),
	favouriteAt: integer("favourite_at"),
	deletedAt: integer("deleted_at"),
	hiddenAt: integer("hidden_at"),
	isAusFood: integer("is_aus_food"),
	isAllStores: integer("is_all_stores").default(true),
	serveSize: text("serve_size"),
	serveUnit: text("serve_unit"),
	publicFoodKey: text("public_food_key"),
	classification: text(),
	foodName: text("food_name"),
	name: text(),
	caloriesWFibre: text("calories_w_fibre"),
	caloriesWoFibre: text("calories_wo_fibre"),
	protein: text(),
	fatTotal: text("fat_total"),
	totalDietaryFibre: text("total_dietary_fibre"),
	totalSugars: text("total_sugars"),
	starch: text(),
	resistantStarch: text("resistant_starch"),
	availableCarbohydrateWithoutSugarAlcohols: text("available_carbohydrate_without_sugar_alcohols"),
	availableCarbohydrateWithSugarAlcohols: text("available_carbohydrate_with_sugar_alcohols"),
},
(table) => [
	index("ingredient_food_key_idx").on(table.publicFoodKey),
	index("ingredient_food_name_idx").on(table.foodName),
]);

export const ceNuIngredientAdditionOne = sqliteTable("ce-nu_ingredient_addition_one", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	ingredientId: integer("ingredient_id").references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	energyWithDietaryFibre: text("energy_with_dietary_fibre"),
	energyWithoutDietaryFibre: text("energy_without_dietary_fibre"),
	addedSugars: text("added_sugars"),
	freeSugars: text("free_sugars"),
	moisture: text(),
	nitrogen: text(),
	alcohol: text(),
	fructose: text(),
	glucose: text(),
	sucrose: text(),
	maltose: text(),
	lactose: text(),
	galactose: text(),
	maltotrios: text(),
	ash: text(),
	dextrin: text(),
	glycerol: text(),
	glycogen: text(),
	inulin: text(),
	erythritol: text(),
	maltitol: text(),
	mannitol: text(),
	xylitol: text(),
	maltodextrin: text(),
	oligosaccharides: text(),
	polydextrose: text(),
	raffinose: text(),
	stachyose: text(),
	sorbitol: text(),
});

export const ceNuIngredientAdditionThree = sqliteTable("ce-nu_ingredient_addition_three", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	ingredientId: integer("ingredient_id").references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	totalSaturatedFattyAcids: text("total_saturated_fatty_acids"),
	totalMonounsaturatedFattyAcids: text("total_monounsaturated_fatty_acids"),
	totalPolyunsaturatedFattyAcids: text("total_polyunsaturated_fatty_acids"),
	totalLongChainOmega3FattyAcids: text("total_long_chain_omega_3_fatty_acids"),
	totalTransFattyAcids: text("total_trans_fatty_acids"),
	caffeine: text(),
	cholesterol: text(),
	alanine: text(),
	arginine: text(),
	asparticAcid: text("aspartic_acid"),
	cystinePlusCysteine: text("cystine_plus_cysteine"),
	glutamicAcid: text("glutamic_acid"),
	glycine: text(),
	histidine: text(),
	isoleucine: text(),
	leucine: text(),
	lysine: text(),
	methionine: text(),
	phenylalanine: text(),
	proline: text(),
	serine: text(),
	threonine: text(),
	tyrosine: text(),
	tryptophan: text(),
	valine: text(),
	c4: text(),
	c6: text(),
	c8: text(),
	c10: text(),
	c11: text(),
	c12: text(),
	c13: text(),
	c14: text(),
	c15: text(),
	c16: text(),
	c17: text(),
	c18: text(),
	c19: text(),
	c20: text(),
	c21: text(),
	c22: text(),
	c23: text(),
	c24: text(),
	totalSaturatedFattyAcidsEquated: text("total_saturated_fatty_acids_equated"),
	c101: text("c10_1"),
	c121: text("c12_1"),
	c141: text("c14_1"),
	c151: text("c15_1"),
	c161: text("c16_1"),
	c171: text("c17_1"),
	c181: text("c18_1"),
	c181W5: text("c18_1w5"),
	c181W6: text("c18_1w6"),
	c181W7: text("c18_1w7"),
	c181W9: text("c18_1w9"),
	c201: text("c20_1"),
	c201W9: text("c20_1w9"),
	c201W13: text("c20_1w13"),
	c201W11: text("c20_1w11"),
	c221: text("c22_1"),
	c221W9: text("c22_1w9"),
	c221W11: text("c22_1w11"),
	c241: text("c24_1"),
	c241W9: text("c24_1w9"),
	c241W11: text("c24_1w11"),
	c241W13: text("c24_1w13"),
	totalMonounsaturatedFattyAcidsEquated: text("total_monounsaturated_fatty_acids_equated"),
	c122: text("c12_2"),
	c162W4: text("c16_2w4"),
	c163: text("c16_3"),
	c182W6: text("c18_2w6"),
	c183W3: text("c18_3w3"),
	c183W4: text("c18_3w4"),
	c183W6: text("c18_3w6"),
	c184W1: text("c18_4w1"),
	c184W3: text("c18_4w3"),
	c202: text("c20_2"),
	c202W6: text("c20_2w6"),
	c203: text("c20_3"),
	c203W3: text("c20_3w3"),
	c203W6: text("c20_3w6"),
	c204: text("c20_4"),
	c204W3: text("c20_4w3"),
	c204W6: text("c20_4w6"),
	c205W3: text("c20_5w3"),
	c215W3: text("c21_5w3"),
	c222: text("c22_2"),
	c222W6: text("c22_2w6"),
	c224W6: text("c22_4w6"),
	c225W3: text("c22_5w3"),
	c225W6: text("c22_5w6"),
	c226W3: text("c22_6w3"),
	totalPolyunsaturatedFattyAcidsEquated: text("total_polyunsaturated_fatty_acids_equated"),
});

export const ceNuIngredientAdditionTwo = sqliteTable("ce-nu_ingredient_addition_two", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	ingredientId: integer("ingredient_id").references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	aceticAcid: text("acetic_acid"),
	citricAcid: text("citric_acid"),
	fumaricAcid: text("fumaric_acid"),
	lacticAcid: text("lactic_acid"),
	malicAcid: text("malic_acid"),
	oxalicAcid: text("oxalic_acid"),
	propionicAcid: text("propionic_acid"),
	quinicAcid: text("quinic_acid"),
	shikimicAcid: text("shikimic_acid"),
	succinicAcid: text("succinic_acid"),
	tartaricAcid: text("tartaric_acid"),
	aluminium: text(),
	antimony: text(),
	arsenic: text(),
	cadmium: text(),
	calcium: text(),
	chromium: text(),
	chloride: text(),
	cobalt: text(),
	copper: text(),
	fluoride: text(),
	iodine: text(),
	iron: text(),
	lead: text(),
	magnesium: text(),
	manganese: text(),
	mercury: text(),
	molybdenum: text(),
	nickel: text(),
	phosphorus: text(),
	potassium: text(),
	selenium: text(),
	sodium: text(),
	sulphur: text(),
	tin: text(),
	zinc: text(),
	retinol: text(),
	alphaCarotene: text("alpha_carotene"),
	betaCarotene: text("beta_carotene"),
	cryptoxanthin: text(),
	betaCaroteneEquivalents: text("beta_carotene_equivalents"),
	vitaminARetinolEquivalents: text("vitamin_a_retinol_equivalents"),
	lutein: text(),
	lycopene: text(),
	xanthophyl: text(),
	thiamin: text(),
	riboflavin: text(),
	niacin: text(),
	niacinDerivedFromTryptophan: text("niacin_derived_from_tryptophan"),
	niacinDerivedEquivalents: text("niacin_derived_equivalents"),
	pantothenicAcid: text("pantothenic_acid"),
	pyridoxine: text(),
	biotin: text(),
	cobalamin: text(),
	folateNatural: text("folate_natural"),
	folicAcid: text("folic_acid"),
	totalFolates: text("total_folates"),
	dietaryFolateEquivalents: text("dietary_folate_equivalents"),
	vitaminC: text("vitamin_c"),
	cholecalciferol: text(),
	ergocalciferol: text(),
	hydroxyCholecalciferol: text("hydroxy_cholecalciferol"),
	hydroxyErgocalciferol: text("hydroxy_ergocalciferol"),
	vitaminDEquivalents: text("vitamin_d_equivalents"),
	alphaTocopherol: text("alpha_tocopherol"),
	alphaTocotrienol: text("alpha_tocotrienol"),
	betaTocopherol: text("beta_tocopherol"),
	betaTocotrienol: text("beta_tocotrienol"),
	deltaTocopherol: text("delta_tocopherol"),
	deltaTocotrienol: text("delta_tocotrienol"),
	gammaTocopherol: text("gamma_tocopherol"),
	gammaTocotrienol: text("gamma_tocotrienol"),
	vitaminE: text("vitamin_e"),
});

export const ceNuIngredientToGroceryStore = sqliteTable("ce-nu_ingredient_to_grocery_store", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	ingredientId: integer("ingredient_id").references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	groceryStoreId: integer("grocery_store_id").references(() => ceNuGroceryStore.id, { onDelete: "cascade" } ),
});

export const ceNuMeal = sqliteTable("ce-nu_meal", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	planId: integer("plan_id").references(() => ceNuPlan.id, { onDelete: "cascade" } ),
	name: text(),
	description: text(),
	image: text(),
	notes: text(),
	creatorId: text("creator_id").references(() => ceNuUser.id),
	mealCategory: text("meal_category"),
	favouriteAt: integer("favourite_at"),
	deletedAt: integer("deleted_at"),
	hiddenAt: integer("hidden_at"),
	vegeNotes: text("vege_notes"),
	vege: text(),
	vegeCalories: text("vege_calories"),
	index: integer(),
	calories: text(),
});

export const ceNuMealToRecipe = sqliteTable("ce-nu_meal_to_recipe", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	mealId: integer("meal_id").references(() => ceNuMeal.id, { onDelete: "cascade" } ),
	recipeId: integer("recipe_id").references(() => ceNuRecipe.id, { onDelete: "cascade" } ),
	index: integer().notNull(),
	note: text(),
});

export const ceNuMealToVegeStack = sqliteTable("ce-nu_meal_to_vege_stack", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	mealId: integer("meal_id").references(() => ceNuMeal.id, { onDelete: "cascade" } ),
	vegeStackId: integer("vege_stack_id").references(() => ceNuVegeStack.id, { onDelete: "cascade" } ),
	calories: text(),
	note: text(),
});

export const ceNuVegeStack = sqliteTable("ce-nu_vege_stack", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	name: text(),
	veges: text(),
	notes: text(),
	calories: text(),
});

export const ceNuNotification = sqliteTable("ce-nu_notification", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").references(() => ceNuUser.id, { onDelete: "cascade" } ),
	title: text(),
	description: text(),
	isRead: integer("is_read"),
	isViewed: integer("is_viewed"),
	isDeleted: integer("is_deleted"),
	notes: text(),
},
(table) => [
	index("notification_user_id_idx").on(table.userId),
]);

export const ceNuPlan = sqliteTable("ce-nu_plan", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	name: text(),
	description: text(),
	image: text(),
	notes: text(),
	numberOfMeals: integer("number_of_meals"),
	creatorId: text("creator_id").references(() => ceNuUser.id),
	recipeCategory: text("recipe_category"),
	favouriteAt: integer("favourite_at"),
	deletedAt: integer("deleted_at"),
	hiddenAt: integer("hidden_at"),
});

export const ceNuPlanToMeal = sqliteTable("ce-nu_plan_to_meal", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	planId: integer("plan_id").references(() => ceNuPlan.id, { onDelete: "cascade" } ),
	mealId: integer("meal_id").references(() => ceNuMeal.id, { onDelete: "cascade" } ),
	index: integer(),
	mealTitle: text("meal_title"),
	calories: text(),
	vegeCalories: text("vege_calories"),
	note: text(),
});

export const ceNuRecipe = sqliteTable("ce-nu_recipe", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	name: text().notNull(),
	description: text().notNull(),
	image: text().notNull(),
	notes: text().notNull(),
	calories: integer().notNull(),
	creatorId: text("creator_id").notNull().references(() => ceNuUser.id),
	recipeCategory: text("recipe_category").notNull(),
	favouriteAt: integer("favourite_at"),
	deletedAt: integer("deleted_at"),
	hiddenAt: integer("hidden_at"),
});

export const ceNuRecipeToIngredient = sqliteTable("ce-nu_recipe_to_ingredient", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	recipeId: integer("recipe_id").notNull().references(() => ceNuRecipe.id, { onDelete: "cascade" } ),
	ingredientId: integer("ingredient_id").notNull().references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	index: integer().notNull(),
	alternateId: integer("alternate_id").references(() => ceNuIngredient.id),
	serve: text().notNull(),
	serveUnit: text("serve_unit").notNull(),
	note: text(),
});

export const ceNuSettings = sqliteTable("ce-nu_settings", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	isCaloriesWithFibre: integer("is_calories_with_fibre"),
});

export const ceNuUserIngredient = sqliteTable("ce-nu_user-ingredient", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	ingredientId: integer("ingredient_id").references(() => ceNuIngredient.id, { onDelete: "cascade" } ),
	userPlanId: integer("user_plan_id").references(() => ceNuUserPlan.id, { onDelete: "cascade" } ),
	dailyMealId: integer("daily_meal_id").references(() => ceNuDailyMeal.id, { onDelete: "cascade" } ),
	name: text(),
	mealIndex: integer("meal_index"),
	recipeIndex: integer("recipe_index"),
	alternateId: integer("alternate_id").references(() => ceNuIngredient.id),
	serve: text(),
	serveUnit: text("serve_unit"),
	note: text(),
	dailyLogId: integer("daily_log_id").references(() => ceNuDailyLog.id),
});

export const ceNuUserMeal = sqliteTable("ce-nu_user-meal", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	userPlanId: integer("user_plan_id").notNull().references(() => ceNuUserPlan.id, { onDelete: "cascade" } ),
	index: integer(),
	mealTitle: text("meal_title"),
	calories: text(),
	protein: text(),
	targetProtein: text("target_protein"),
	targetCalories: text("target_calories"),
	vegeCalories: text("vege_calories"),
	veges: text(),
	vegeNotes: text("vege_notes"),
	note: text(),
});

export const ceNuUserPlan = sqliteTable("ce-nu_user-plan", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	finishedAt: integer("finished_at"),
	startAt: integer("start_at"),
	isActive: integer("is_active"),
	name: text().notNull(),
	description: text().notNull(),
	image: text().notNull(),
	notes: text().notNull(),
	numberOfMeals: integer("number_of_meals"),
	creatorId: text("creator_id").notNull().references(() => ceNuUser.id),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	favouriteAt: integer("favourite_at"),
	deletedAt: integer("deleted_at"),
	hiddenAt: integer("hidden_at"),
});

export const ceNuUserRecipe = sqliteTable("ce-nu_user-recipe", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	mealIndex: integer("meal_index"),
	recipeIndex: integer("recipe_index"),
	userPlanId: integer("user_plan_id").references(() => ceNuUserPlan.id, { onDelete: "cascade" } ),
	dailyMealId: integer("daily_meal_id").references(() => ceNuDailyMeal.id, { onDelete: "cascade" } ),
	name: text(),
	index: integer(),
	serve: text(),
	serveUnit: text("serve_unit"),
	note: text(),
	isLog: integer("is_log"),
	dailyLogId: integer("daily_log_id").references(() => ceNuDailyLog.id),
});

export const ceNuAccount = sqliteTable("ce-nu_account", {
	userId: text("user_id", { length: 255 }).notNull().references(() => ceNuUser.id),
	type: text({ length: 255 }).notNull(),
	provider: text({ length: 255 }).notNull(),
	providerAccountId: text("provider_account_id", { length: 255 }).notNull(),
	refreshToken: text("refresh_token"),
	accessToken: text("access_token"),
	expiresAt: integer("expires_at"),
	tokenType: text("token_type", { length: 255 }),
	scope: text({ length: 255 }),
	idToken: text("id_token"),
	sessionState: text("session_state", { length: 255 }),
},
(table) => [
	index("account_user_id_idx").on(table.userId),
	primaryKey({ columns: [table.provider, table.providerAccountId], name: "ce-nu_account_provider_provider_account_id_pk"})
]);

export const ceNuDailyMeal = sqliteTable("ce-nu_daily_meal", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	dailyLogId: integer("daily_log_id").notNull().references(() => ceNuDailyLog.id, { onDelete: "cascade" } ),
	mealIndex: integer("meal_index"),
	date: integer(),
	recipeId: integer("recipe_id"),
	vegeCalories: text("vege_calories"),
	veges: text(),
});

export const ceNuPoopLog = sqliteTable("ce-nu_poop_log", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	dailyLogId: integer("daily_log_id").notNull().references(() => ceNuDailyLog.id, { onDelete: "cascade" } ),
});

export const ceNuRole = sqliteTable("ce-nu_role", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	userId: text("user_id").references(() => ceNuUser.id, { onDelete: "cascade" } ),
	name: text(),
});

export const ceNuSession = sqliteTable("ce-nu_session", {
	sessionToken: text("session_token", { length: 255 }).primaryKey().notNull(),
	userId: text({ length: 255 }).notNull().references(() => ceNuUser.id),
	expires: integer().notNull(),
},
(table) => [
	index("session_userId_idx").on(table.userId),
]);

export const ceNuUser = sqliteTable("ce-nu_user", {
	id: text({ length: 255 }).primaryKey().notNull(),
	name: text(),
	firstName: text("first_name"),
	lastName: text("last_name"),
	clerkId: text("clerk_id"),
	birthDate: integer("birth_date"),
	gender: text(),
	address: text(),
	notes: text(),
	instagram: text(),
	openLifter: text("open_lifter"),
	phone: text(),
	email: text(),
	emailVerified: integer("email_verified"),
	password: text(),
	currentPlanId: integer("current_plan_id"),
	image: text(),
	isFake: integer("is_fake").default(false),
	isTrainer: integer("is_trainer").default(false),
	isRoot: integer("is_root").default(false),
	isCreator: integer("is_creator").default(false),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
},
(table) => [
	index("email_idx").on(table.email),
	index("clerk_id_idx").on(table.clerkId),
	index("name_idx").on(table.name),
	uniqueIndex("ce-nu_user_email_unique").on(table.email),
]);

export const ceNuUserToTrainer = sqliteTable("ce-nu_user_to_trainer", {
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	trainerId: text("trainer_id").notNull().references(() => ceNuUser.id),
});

export const ceNuVerificationToken = sqliteTable("ce-nu_verification_token", {
	identifier: text({ length: 255 }).notNull(),
	token: text({ length: 255 }).notNull(),
	expires: integer().notNull(),
},
(table) => [
	primaryKey({ columns: [table.identifier, table.token], name: "ce-nu_verification_token_identifier_token_pk"})
]);

export const ceNuWaterLog = sqliteTable("ce-nu_water_log", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	dailyLogId: integer("daily_log_id").notNull().references(() => ceNuDailyLog.id, { onDelete: "cascade" } ),
	water: text(),
});

export const ceNuWeighIn = sqliteTable("ce-nu_weigh_in", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	trainerId: text("trainer_id").notNull().references(() => ceNuUser.id),
	date: integer().default(sql`(unixepoch())`).notNull(),
	bodyWeight: text("body_weight"),
	leanMass: text("lean_mass"),
	bodyFat: text("body_fat"),
	bloodPressure: text("blood_pressure"),
	image: text(),
	notes: text(),
});

export const ceNuLog = sqliteTable("ce-nu_log", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	task: text(),
	notes: text(),
	user: text(),
	objectId: integer("object_id"),
	userId: text("user_id"),
});

export const ceNuDailyLog = sqliteTable("ce-nu_daily_log", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	userId: text("user_id").notNull().references(() => ceNuUser.id, { onDelete: "cascade" } ),
	date: text().notNull(),
	morningWeight: text("morning_weight"),
	notes: text(),
	fastedBloodGlucose: text("fasted_blood_glucose"),
	sleep: text(),
	sleepQuality: text("sleep_quality"),
	isHiit: integer("is_hiit"),
	isCardio: integer("is_cardio"),
	isLift: integer("is_lift"),
	isLiss: integer("is_liss"),
	image: text(),
	waistMeasurement: text("waist_measurement"),
	nap: text(),
	hiit: text(),
	cardio: text(),
	weight: text(),
	liss: text(),
	cardioType: text("cardio_type"),
	isStarred: integer("is_starred").default(false),
},
(table) => [
	index("date_idx").on(table.date),
]);

export const ceNuUserSettings = sqliteTable("ce-nu_user_settings", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	updatedAt: integer("updated_at"),
	userId: text("user_id").notNull().references(() => ceNuUser.id, { onDelete: "cascade" } ),
	defaultWater: text("default_water"),
	defaultChartRange: text("default_chart_range"),
});

export const ceNuSkinfold = sqliteTable("ce-nu_skinfold", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	date: text().notNull(),
	chin: text(),
	cheek: text(),
	lowerAbdominal: text("lower_abdominal"),
	pectoral: text(),
	biceps: text(),
	triceps: text(),
	subscapular: text(),
	midAxillary: text("mid_axillary"),
	suprailiac: text(),
	umbilical: text(),
	lowerBack: text("lower_back"),
	quadriceps: text(),
	hamstrings: text(),
	medialCalf: text("medial_calf"),
	knee: text(),
	shoulder: text(),
	notes: text(),
},
(table) => [
	index("skinfold_date_idx").on(table.date),
]);

export const ceNuBodyFat = sqliteTable("ce-nu_body_fat", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	date: text().notNull(),
	bodyFat: text("body_fat"),
	notes: text(),
	skinfoldId: integer("skinfold_id").references(() => ceNuSkinfold.id, { onDelete: "cascade" } ),
},
(table) => [
	index("body_fat_date_idx").on(table.date),
]);

export const ceNuBodyWeight = sqliteTable("ce-nu_body_weight", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	date: text().notNull(),
	bodyWeight: text("body_weight"),
	source: text(),
	notes: text(),
	skinfoldId: integer("skinfold_id").references(() => ceNuSkinfold.id, { onDelete: "cascade" } ),
},
(table) => [
	index("body_weight_date_idx").on(table.date),
]);

export const ceNuLeanMass = sqliteTable("ce-nu_lean_mass", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id),
	date: text().notNull(),
	leanMass: text("lean_mass"),
	notes: text(),
	skinfoldId: integer("skinfold_id").references(() => ceNuSkinfold.id, { onDelete: "cascade" } ),
},
(table) => [
	index("lean_mass_date_idx").on(table.date),
]);

export const ceNuMessage = sqliteTable("ce-nu_message", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	userId: text("user_id").references(() => ceNuUser.id, { onDelete: "cascade" } ),
	subject: text(),
	isImportant: integer("is_important"),
	isRead: integer("is_read"),
	isViewed: integer("is_viewed"),
	isDeleted: integer("is_deleted"),
	message: text(),
	image: text(),
	fromUserId: text("from_user_id").references(() => ceNuUser.id, { onDelete: "cascade" } ),
},
(table) => [
	index("message_from_user_id_idx").on(table.fromUserId),
	index("message_user_id_idx").on(table.userId),
]);

export const ceNuTag = sqliteTable("ce-nu_tag", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	createdAt: integer("created_at").default(sql`(unixepoch())`).notNull(),
	name: text().notNull(),
	icon: text().notNull(),
	color: text().notNull(),
	userId: text("user_id").notNull().references(() => ceNuUser.id, { onDelete: "cascade" } ),
});

export const ceNuTagToDailyLog = sqliteTable("ce-nu_tag_to_daily_log", {
	id: integer().primaryKey({ autoIncrement: true }).notNull(),
	tagId: integer("tag_id").notNull().references(() => ceNuTag.id, { onDelete: "cascade" } ),
	dailyLogId: integer("daily_log_id").notNull().references(() => ceNuDailyLog.id, { onDelete: "cascade" } ),
});

export const drizzleMigrations = sqliteTable("__drizzle_migrations", {
});

